

####_________________WARMUPS________________####

# 1. Solve Me First
def solveMeFirst(a,b):
	# Hint: Type return a+b below
    return a+b


num1 = int(input())
num2 = int(input())
res = solveMeFirst(num1,num2)
print(res)


# 2. Simple Array Sum
#!/bin/python3

import os
import sys

#
# Complete the simpleArraySum function below.
#
def simpleArraySum(ar):
    return sum(ar)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    ar_count = int(input())

    ar = list(map(int, input().rstrip().split()))

    result = simpleArraySum(ar)

    fptr.write(str(result) + '\n')

    fptr.close()



# 3. Compare the Triplets
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the compareTriplets function below.
def compareTriplets(a, b):
    cont_a=0
    cont_b=0
    l=[]
    for i in range(3):
        if (a[i]>b[i]):
            cont_a+=1
        elif (b[i]>a[i]):
            cont_b+=1
    l.append(cont_a)
    l.append(cont_b)
    return l


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    a = list(map(int, input().rstrip().split()))

    b = list(map(int, input().rstrip().split()))

    result = compareTriplets(a, b)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()


# 4. A Very Big Sum

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the aVeryBigSum function below.
def aVeryBigSum(ar):
    return sum(ar)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    ar_count = int(input())

    ar = list(map(int, input().rstrip().split()))

    result = aVeryBigSum(ar)

    fptr.write(str(result) + '\n')

    fptr.close()


#. 5. Diagonal Difference
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the diagonalDifference function below.
def diagonalDifference(arr):
    pd=0
    for i in range(len(arr)):
        pd+=arr[i][i]
    sd=0
    for j in range(len(arr)):
        sd+=arr[j][len(arr)-j-1]
    return abs(pd-sd)



if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = []

    for _ in range(n):
        arr.append(list(map(int, input().rstrip().split())))

    result = diagonalDifference(arr)

    fptr.write(str(result) + '\n')

    fptr.close()


# 6. Plus Minus
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the plusMinus function below.
def plusMinus(arr):
    pos=0
    neg=0
    z=0
    l=[]
    for i in arr:
        if (i>0):
            pos+=1
        elif (i==0):
            z+=1
        else:
            neg+=1
    l.append(float(pos/len(arr)))
    l.append(float(neg/len(arr)))
    l.append(float(z/len(arr)))
    for i in l:
        print ('%.6f' % i)


if __name__ == '__main__':
    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    plusMinus(arr


# 7. Staircase
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the staircase function below.
def staircase(n):
    star=1
    space=n-1
    for i in range(n):
        print(" "*space, end="")
        print("#"*star)
        star+=1
        space-=1

if __name__ == '__main__':
    n = int(input())

    staircase(n)


# 8. Mini-Max Sum
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the miniMaxSum function below.
def miniMaxSum(arr):
    arr=sorted(arr)
    minim=arr[0]+arr[1]+arr[2]+arr[3]
    maxim=arr[1]+arr[2]+arr[3]+arr[4]
    print(minim, end=" ")
    print(maxim)

if __name__ == '__main__':
    arr = list(map(int, input().rstrip().split()))

    miniMaxSum(arr)


# 9. Birthday Cake Candles
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the birthdayCakeCandles function below.
def birthdayCakeCandles(ar):
    height=max(ar)
    cont=0
    for i in ar:
        if (i==height):
            cont+=1
    return cont

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    ar_count = int(input())

    ar = list(map(int, input().rstrip().split()))

    result = birthdayCakeCandles(ar)

    fptr.write(str(result) + '\n')

    fptr.close()


# 10. Time Conversion
#!/bin/python3

import os
import sys

#
# Complete the timeConversion function below.
#
def timeConversion(s):
    if s.endswith('AM') and s.startswith('12'):
        s=s.replace('AM','')
        s=s.split(':')
        hh='00'
        mm=s[1]
        ss= s[2]
        return (hh + ':' + mm + ':' + ss)
    elif s.endswith('PM') and s.startswith('12'):
        return s.replace('PM','')
    elif s.endswith('AM'):
        return s.replace('AM','')
    elif s.endswith('PM'):
        s=s.replace('PM','')
        s=s.split(':')
        hh=int(s[0]) + 12
        hh=str(hh)
        mm=s[1]
        ss= s[2]
        return (hh + ':' + mm + ':' + ss)

if __name__ == '__main__':
    f = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = timeConversion(s)

    f.write(result + '\n')

    f.close()





######____________Sorting________________######

# 1. Intro to Tutorial Challenges

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the introTutorial function below.
def introTutorial(V, arr):
    for i in range(len(arr)):
        if (arr[i]==V):
            return i

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    V = int(input())

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = introTutorial(V, arr)

    fptr.write(str(result) + '\n')

    fptr.close()



# 2. Insertion Sort - Part 1

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the insertionSort1 function below.
def insertionSort1(n, arr):
    elem=arr[n-1]
    i=n-2
    while (arr[i]>elem and i>=0):
        arr[i+1]=arr[i]
        i=i-1
        for j in range(0,n):
            print(arr[j], end=" ")
        print("")
    arr[i+1]=elem

    for j in range(0,n):
        print(arr[j], end=" ")

    return arr

if __name__ == '__main__':
    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    insertionSort1(n, arr)


# 3. The Full Counting Sort
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the insertionSort1 function below.
def insertionSort1(n, arr):
    elem=arr[n-1]
    i=n-2
    while (arr[i]>elem and i>=0):
        arr[i+1]=arr[i]
        i=i-1
        for j in range(0,n):
            print(arr[j], end=" ")
        print("")
    arr[i+1]=elem

    for j in range(0,n):
        print(arr[j], end=" ")

    return arr

if __name__ == '__main__':
    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    insertionSort1(n, arr)


#4. Insertion Sort - Part 2
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the insertionSort2 function below.
def insertionSort2(n, arr):
    for j in range(1,len(arr)):
        key=arr[j]
        i=j-1
        while (i>-1 and arr[i]>key):
            arr[i+1]=arr[i]
            i=i-1

        arr[i+1]=key
        print (' '.join(str(x) for x in arr))


if __name__ == '__main__':
    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    insertionSort2(n, arr)


# 5. Correctness and the Loop Invariant


def insertion_sort(l):
    for i in range(1, len(l)):
        j = i-1
        key = l[i]
        while (j >= 0) and (l[j] > key):
           l[j+1] = l[j]
           j -= 1
        l[j+1] = key

m = int(input().strip())
ar = [int(i) for i in input().strip().split()]
insertion_sort(ar)
print(" ".join(map(str,ar)))


# 6. Running Time of Algorithms
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the runningTime function below.
def runningTime(arr):
    cont=0
    for j in range(1,len(arr)):
        key=arr[j]
        i=j-1
        while (i>-1 and arr[i]>key):
            cont=cont+1
            arr[i+1]=arr[i]
            i=i-1

        arr[i+1]=key
    return cont

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = runningTime(arr)

    fptr.write(str(result) + '\n')

    fptr.close()


# 7. Quicksort 1 - Partition
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the quickSort function below.
def quickSort(arr):
    p=arr[0];
    left=[];
    right=[];
    i=1
    while (i<len(arr)):
        if (arr[i]>p):
            left.append(arr[i])
        else:
            right.append(arr[i])
        i=i+1
    right.append(p)
    for i in left:
        right.append(i)
    return right
    #for i in right:
        #print(right[i], end=" ")




if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = quickSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()



# 8. Counting Sort 2
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the countingSort function below.
def countingSort(arr):
    sorted_arr=[]
    dim=max(arr)+1;
    l=[0]*dim
    for i in arr:
        l[i]+=1
    for j in range(dim):
        if (l[j]!=0):
            sorted_arr+=[j]*l[j];
    return sorted_arr;


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = countingSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()


# 10. Closest Numbers
#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the closestNumbers function below.
def closestNumbers(arr):
    arr=sorted(arr)
    diff=abs(arr[0]-arr[1])
    i=1
    while (i<=(len(arr)-2)):
        if (abs(arr[i+1]-arr[i])<diff):
            diff=abs(arr[i+1]-arr[i])
        i=i+1
    j=0
    l=[]
    while (j<=(len(arr)-2)):
        if (abs(arr[j+1]-arr[j])==diff):
            l=l+[arr[j]]
            l=l+[arr[j+1]]
        j=j+1
    return l



if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = list(map(int, input().rstrip().split()))

    result = closestNumbers(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()
    
    
    
    
    
#####______________Strings___________#####


